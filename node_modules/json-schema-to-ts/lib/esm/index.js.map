{"version":3,"sources":["../../src/index.ts"],"names":["wrapCompilerAsTypeGuard","wrapValidatorAsTypeGuard","asConst"],"mappings":"AAyBA,SACEA,uBADF,EAEEC,wBAFF,EAGEC,OAHF;AAMA;AACA;AACA","sourcesContent":["import type { M } from \"ts-algebra\";\n\nimport type {\n  JSONSchema7 as WritableJSONSchema7,\n  JSONSchema7Reference as WritableJSONSchema7Reference,\n  JSONSchema7Extension,\n  ExtendedJSONSchema7 as WritableExtendedJSONSchema7,\n  ExtendedJSONSchema7Reference as WritableExtendedJSONSchema7Reference,\n  UnextendJSONSchema7,\n  FromSchemaOptions,\n  FromSchemaDefaultOptions,\n  FromExtendedSchemaOptions,\n} from \"./definitions\";\nimport type { ParseOptions } from \"./parse-options\";\nimport type { ParseSchema } from \"./parse-schema\";\nimport type { Readonly, Writable } from \"./type-utils\";\n\nexport type {\n  DeserializationPattern,\n  FromSchemaOptions,\n  FromExtendedSchemaOptions,\n  FromSchemaDefaultOptions,\n  JSONSchema7Extension,\n} from \"./definitions\";\nexport type { $Compiler, Compiler, $Validator, Validator } from \"./utils\";\nexport {\n  wrapCompilerAsTypeGuard,\n  wrapValidatorAsTypeGuard,\n  asConst,\n} from \"./utils\";\n\n/**\n * Unwidened V7 JSON schema (e.g. defined with the `as const` statement)\n */\nexport type JSONSchema7 = WritableJSONSchema7 | Readonly<WritableJSONSchema7>;\n\n/**\n * Unwidened extended V7 JSON schema (e.g. defined with the `as const` statement)\n */\nexport type ExtendedJSONSchema7<EXTENSION extends JSONSchema7Extension> =\n  | WritableExtendedJSONSchema7<EXTENSION>\n  | Readonly<WritableExtendedJSONSchema7<EXTENSION>>;\n\n/**\n * Unwidened V7 JSON schema reference (e.g. defined with the `as const` statement)\n */\nexport type JSONSchema7Reference =\n  | WritableJSONSchema7Reference\n  | Readonly<WritableJSONSchema7Reference>;\n\n/**\n * Unwidened extended V7 JSON schema reference (e.g. defined with the `as const` statement)\n */\nexport type ExtendedJSONSchema7Reference<\n  EXTENSION extends JSONSchema7Extension,\n> =\n  | WritableExtendedJSONSchema7Reference<EXTENSION>\n  | Readonly<WritableExtendedJSONSchema7Reference<EXTENSION>>;\n\n/**\n * Unwidened JSON schema (e.g. defined with the `as const` statement)\n */\nexport type JSONSchema = JSONSchema7;\n\n/**\n * Unwidened extended JSON schema (e.g. defined with the `as const` statement)\n */\nexport type ExtendedJSONSchema<EXTENSION extends JSONSchema7Extension> =\n  ExtendedJSONSchema7<EXTENSION>;\n\n/**\n * Given a JSON schema defined with the `as const` statement, infers the type of valid instances\n *\n * @param S JSON schema\n */\nexport type FromSchema<\n  SCHEMA extends JSONSchema,\n  OPTIONS extends FromSchemaOptions = FromSchemaDefaultOptions,\n  WRITABLE_SCHEMA extends WritableJSONSchema7 = SCHEMA extends Record<\n    string | number | symbol,\n    unknown\n  >\n    ? Writable<SCHEMA>\n    : SCHEMA,\n> = M.$Resolve<\n  ParseSchema<WRITABLE_SCHEMA, ParseOptions<WRITABLE_SCHEMA, OPTIONS>>\n>;\n\n/**\n * Given an extended JSON schema defined with the `as const` statement, infers the type of valid instances\n *\n * @param SCHEMA JSON schema\n */\nexport type FromExtendedSchema<\n  EXTENSION extends JSONSchema7Extension,\n  SCHEMA extends ExtendedJSONSchema<EXTENSION>,\n  OPTIONS extends FromExtendedSchemaOptions<EXTENSION> = FromSchemaDefaultOptions,\n  UNEXTENDED_SCHEMA = UnextendJSONSchema7<EXTENSION, SCHEMA>,\n> = UNEXTENDED_SCHEMA extends JSONSchema\n  ? FromSchema<UNEXTENDED_SCHEMA, OPTIONS>\n  : never;\n"],"file":"index.js"}